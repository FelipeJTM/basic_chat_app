import 'package:basic_chat_app/service/database_service.dart';import 'package:basic_chat_app/helper/string_format_helper.dart';import 'package:basic_chat_app/widgets/loading_widget.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import '../helper/screen_nav_helper.dart';import '../models/dialog_parameters.dart';import '../widgets/general_custom_widget.dart';import 'home_page.dart';class GroupInfoParameters {  final String groupName;  final String groupID;  final String adminName;  final String userName;  GroupInfoParameters({    required this.groupName,    required this.groupID,    required this.adminName,    required this.userName,  });}class GroupInfo extends StatefulWidget {  const GroupInfo({super.key, required this.parameters});  final GroupInfoParameters parameters;  @override  State<GroupInfo> createState() => _GroupInfoState();}class _GroupInfoState extends State<GroupInfo> {  Stream? members;  String get groupId => widget.parameters.groupID;  String get userName => widget.parameters.userName;  String get groupName => widget.parameters.groupName;  String get adminName => widget.parameters.adminName;  @override  void initState() {    getMembers();    super.initState();  }  getMembers() async {    DataBaseService(uid: FirebaseAuth.instance.currentUser!.uid)        .getGroupsMembers(groupId)        .then((value) {      setState(() {        members = value;      });    });  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: appBar(),      body: body(),    );  }  AppBar appBar() {    return AppBar(      title: const Text("Group Info"),      backgroundColor: Theme.of(context).primaryColor,      elevation: 0,      actions: [        IconButton(            onPressed: () {              showDialog(                  context: context,                  builder: (context) {                    return GeneralPurposeWidget.generalDialog(                        ctx: context,                        dialogParams: DialogParameters(                          title: "Logout",                          onPressed: () => leaveTheGroup(),                          content: const Text(                              "Are you sure you want to exit the group?"),                        ));                  });            },            icon: const Icon(Icons.exit_to_app))      ],    );  }  void leaveTheGroup() {    var userID = FirebaseAuth.instance.currentUser!.uid;    var userNameFormatted = StringFormatHelper.getName(userName);    DataBaseService(uid: userID)        .toggleGroupJoin(      groupId,      userNameFormatted,      groupName,    )        .whenComplete(() {      ScreenNavHelper.nextScreenReplace(ctx: context, page: const HomePage());    });  }  Widget body() {    return Container(      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 20.0),      child: Column(        children: [          Container(            padding: const EdgeInsets.all(20.0),            decoration: BoxDecoration(                borderRadius: BorderRadius.circular(30),                color: Theme.of(context).primaryColor.withOpacity(0.2)),            child: Row(              children: [                avatar(),                const SizedBox(width: 20),                information(),              ],            ),          ),          memberList(),        ],      ),    );  }  Widget avatar() {    return CircleAvatar(      radius: 30,      backgroundColor: Theme.of(context).primaryColor,      child: Text(        groupName.substring(0, 1).toUpperCase(),        style:            const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),      ),    );  }  Widget information() {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Text(          "Group: $groupName",          style: const TextStyle(fontWeight: FontWeight.w500),        ),        const SizedBox(height: 5),        Text("Admin: ${StringFormatHelper.getName(adminName)}"),      ],    );  }  memberList() {    return StreamBuilder(        stream: members,        builder: (context, AsyncSnapshot snapshot) {          if (!snapshot.hasData) return LoadingWidgets.simpleCircle(context);          if (snapshot.data == null) return noMembersWidget();          if (snapshot.data['members'].length == 0) return noMembersWidget();          return ListView.builder(            itemCount: snapshot.data['members'].length,            shrinkWrap: true,            itemBuilder: (context, index) {              return Container(                  padding: const EdgeInsets.symmetric(                    vertical: 10,                    horizontal: 5,                  ),                  child: membersTile(snapshot.data['members'][index]));            },          );        });  }  Widget membersTile(var member) {    return ListTile(      leading: CircleAvatar(          radius: 30,          backgroundColor: Theme.of(context).primaryColor,          child: Text(            StringFormatHelper.getName(member).substring(0, 1).toUpperCase(),            style: const TextStyle(                color: Colors.white, fontSize: 15, fontWeight: FontWeight.bold),          )),      title: Text(StringFormatHelper.getName(member)),      subtitle: Text(StringFormatHelper.getId(member)),    );  }  Widget noMembersWidget() {    return const Center(      child: Text("NO MEMBERS YET"),    );  }}